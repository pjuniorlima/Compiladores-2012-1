%{
	#include<stdio.h>
	#include<stdlib.h>
	FILE *yyin;
	extern int yylineno;
	extern int yylex();
	void yyerror(char const *msg);
	char* constString=NULL;
%}

%token PROGRAMA
%token CAR
%token CARCONST
%token IDENTIFICADOR
%token INT
%token INTCONST
%token RETORNE
%token LEIA
%token ESCREVA
%token CADEIACARACTERES
%token NOVALINHA
%token SE 
%token ENTAO
%token SENAO
%token ENQUANTO
%token EXECUTE
%token ATRIBUICAO
%token IGUAL
%token DIFERENTE
%token MAIOR
%token MAIORIGUAL
%token MENOR
%token MENORIGUAL
%token NEGACAO
%token OULOGICO
%token ELOGICO
%token ABREPAR
%token FECHAPAR
%token ABRECHAVE
%token FECHACHAVE
%token ABRECOLCH
%token FECHACOLCH
%token VIRGULA
%token PONTOVIRGULA
%token ADICAO
%token SUBTRACAO
%token DIVISAO
%token MULTIPLICACAO
%token MOD
%token INTERROGACAO
%token DOISPONTOS


%error-verbose
%%

Programa:	DeclFuncVar DeclProg
;
DeclFuncVar:	Tipo IDENTIFICADOR DeclVar PONTOVIRGULA DeclFuncVar
		| Tipo IDENTIFICADOR ABRECOLCH INTCONST FECHACOLCH DeclVar PONTOVIRGULA DeclFuncVar
		| Tipo IDENTIFICADOR DeclFunc DeclFuncVar
		| 
;

DeclProg:	PROGRAMA Bloco
;

DeclVar:	
		| VIRGULA IDENTIFICADOR DeclVar
		| VIRGULA IDENTIFICADOR ABRECOLCH INTCONST FECHACOLCH DeclVar
;

DeclFunc:	ABREPAR ListaParametros FECHAPAR Bloco
;

ListaParametros:	
		| ListaParametrosCont
;

ListaParametrosCont:	Tipo IDENTIFICADOR
		| Tipo IDENTIFICADOR ABRECOLCH FECHACOLCH
		| Tipo IDENTIFICADOR VIRGULA ListaParametrosCont
		| Tipo IDENTIFICADOR ABRECOLCH FECHACOLCH VIRGULA ListaParametrosCont
; 

Bloco:		ABRECHAVE ListaDeclVar ListaComando FECHACHAVE
		| ABRECHAVE ListaDeclVar FECHACHAVE
;

ListaDeclVar:	
		| Tipo IDENTIFICADOR DeclVar PONTOVIRGULA ListaDeclVar
		| Tipo IDENTIFICADOR ABRECOLCH INTCONST FECHACOLCH DeclVar PONTOVIRGULA ListaDeclVar
;

Tipo:		INT
		| CAR
;

ListaComando:	Comando
		| Comando ListaComando
;

Comando:	PONTOVIRGULA
		| Expr PONTOVIRGULA
		| RETORNE Expr PONTOVIRGULA
		| LEIA LValueExpr PONTOVIRGULA
		| ESCREVA Expr PONTOVIRGULA
		| ESCREVA CADEIACARACTERES PONTOVIRGULA
		| NOVALINHA PONTOVIRGULA
		| SE ABREPAR Expr FECHAPAR ENTAO Comando
		| SE ABREPAR Expr FECHAPAR ENTAO Comando SENAO Comando
		| ENQUANTO ABREPAR Expr FECHAPAR EXECUTE Comando
		| Bloco
;

Expr:		AssignExpr
;

AssignExpr:	CondExpr
		| LValueExpr IGUAL AssignExpr
;

CondExpr:	OrExpr
		| OrExpr INTERROGACAO Expr DOISPONTOS CondExpr
;

OrExpr:		OrExpr OULOGICO AndExpr
		| AndExpr
;

AndExpr:	AndExpr ELOGICO EqExpr
		| EqExpr
;

EqExpr:		EqExpr IGUAL DesigExpr
		| EqExpr DIFERENTE DesigExpr
		| DesigExpr
;

DesigExpr:	DesigExpr MENOR AddExpr
		| DesigExpr MAIOR AddExpr
		| DesigExpr MAIORIGUAL AddExpr
		| DesigExpr MENORIGUAL AddExpr
		| AddExpr
;

AddExpr:	AddExpr ADICAO MulExpr
		| AddExpr SUBTRACAO MulExpr
		| MulExpr
;

MulExpr:	MulExpr MULTIPLICACAO UnExpr
		| MulExpr DIVISAO UnExpr
		| MulExpr MOD UnExpr
		| UnExpr
;

UnExpr:		PrimExpr
		| NEGACAO PrimExpr
		| PrimExpr
;

LValueExpr:	IDENTIFICADOR ABRECOLCH Expr FECHACOLCH
		| IDENTIFICADOR
;

PrimExpr:	IDENTIFICADOR ABREPAR ListExpr FECHAPAR
		| IDENTIFICADOR ABREPAR FECHAPAR
		| IDENTIFICADOR ABRECOLCH Expr FECHACOLCH
		| IDENTIFICADOR
		| CARCONST
		| INTCONST
		| ABREPAR Expr FECHAPAR
;

ListExpr:	AssignExpr
		| ListExpr PONTOVIRGULA AssignExpr
;

%%
void yyerror(char const* msg){
	printf("%s -- Linha %d\n", msg, yylineno);
}
int main(int argc, char** argv){
	if(argc != 2){
		printf("Uso: cezinho <nome>\n");
		exit(1);
	}
	yyin=fopen(argv[1], "rt");
	if(yyin)
		return yyparse();
	else
		yyerror("arquivo n√£o encontrado.\n");
	return 1;
}
		
