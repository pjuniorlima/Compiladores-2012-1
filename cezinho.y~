%{
	#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>//Hash Tables — associations between keys and values so that given a key the value can be found quickly - tirado de http://goo.gl/yyBZa

#include "common.h"
#include "node.h"
#include "env.h"

extern scanner lex_value;
extern int yylineno;

// Mapeia os ids das funções com os parâmetros
char cur_func[100];
GHashTable *func_params;

int has_pushed = 0;
Node *root;
Env *top, *saved;

Env* new_env(Env *p){
	Env *env = malloc(sizeof(Env));
	env->table = g_hash_table_new(g_str_hash, g_str_equal);
	env->prev = p;
	
	return env;
}

char* env_get(Env *env, char *k) {
	// debug da tabela de simbolos
	// table_dump(env);
	for(; env != null; env = env->prev){
		char *type = g_hash_table_lookup(env->table, k);
		
		if(type != null){
			return type;
		}
	}
	return null;
}

// Insere na tabela de simbolos o 'id' e o 'tipo'
void env_put(Env *env, char *k, Node *v) {
	char *type = g_hash_table_lookup(env->table, k);
	if ( type != null ) {
		char msg[100];
		sprintf(msg, "Variável %s já declarada no escopo", k);
		yyerror(msg);
	}
	else {
		g_hash_table_insert(env->table, k, v);
	}
}

void array_id(char *result, char *str){
	char *full = str;
	
	int i, begin = 0, end;
	for(i=0; i<strlen(full); i++){
		if(full[i] == '['){
			end = i;
			break;
		}
	}
	
	strncpy(result, &full[begin], end);
}

char* array_pos(char *result, char *str){
	char *full = str;
	
	int i, begin, end;
	for(i=0; i<strlen(full); i++){
		if(full[i] == '['){
			begin = end = i+1;
		}
		else if (full[i] == ']'){
			break;
		}
		else {
			end++;
		}
	}
	
	strncpy(result, &full[begin], end-begin);
}

int is_id(char *str){
	return str[0] < '0' || str[0] > '9';
}

int verify_env(Node *n) {
	char msg[100];
	if(n->type == cID){
		char *id = (char*) n->value;
		if(env_get(top, id) == null){
			sprintf(msg, "Variável \"%s\" não declarada", id);
			yyerror(msg);
			return 0;
		}
	}
	
	if(n->type == cARRAY){
		char *id = (char*) n->value;
		int flag = 0;
		
		if(env_get(top, id) == null){
			sprintf(msg, "Variável \"%s\" não declarada", id);
			yyerror(msg);
			flag = 1;
		}
		
		char *pos = (char*) n1(n)->value;
		if(is_id(pos)){
			if(env_get(top, pos) == null){
				sprintf(msg, "Variável \"%s\" não declarada", pos);
				yyerror(msg);
				flag = 1;
			}
			if(strcmp(env_get(top, pos), "char") == 0){
				sprintf(msg, "Variável \"%s\" é do tipo char, apenas inteiros são permitos em indices de arrays", pos);
				yyerror(msg);
				flag = 1;
			}
		}
		
		if(flag) return 0;
	}
	return 1;
}

// Busca o tipo do atributo mais a esquerda da expressão
enum node_type get_type(Node *n);

// Verifica se os argumentos passados a função corresponde aos da assinatura
int compare_params_args(Node *params, Node *args);

%}

%union semrec{
	int intval;
	char *id;
	struct lbs *lbs;
}


%token PROGRAMA
%token <id> CAR
%token <id> CARCONST
%token <id> IDENTIFICADOR
%token <intval> INT
%token <intval> INTCONST
%token RETORNE
%token LEIA
%token ESCREVA
%token CADEIACARACTERES
%token NOVALINHA
%token SE 
%token ENTAO
%token SENAO
%token ENQUANTO
%token EXECUTE
%token ATRIBUICAO
%token IGUAL
%token DIFERENTE
%token MAIOR
%token MAIORIGUAL
%token MENOR
%token MENORIGUAL
%token NEGACAO
%token OULOGICO
%token ELOGICO
%token ABREPAR
%token FECHAPAR
%token ABRECHAVE
%token FECHACHAVE
%token ABRECOLCH
%token FECHACOLCH
%token VIRGULA
%token PONTOVIRGULA
%left ADICAO SUBTRACAO
%right MULTIPLICACAO DIVISAO
%token MOD
%token INTERROGACAO
%token DOISPONTOS


%error-verbose
%%

Programa:	DeclFuncVar DeclProg
;

DeclFuncVar:	Tipo IDENTIFICADOR DeclVar PONTOVIRGULA DeclFuncVar {install($2)}
		| Tipo IDENTIFICADOR ABRECOLCH INTCONST FECHACOLCH DeclVar PONTOVIRGULA DeclFuncVar {install($2)}
		| Tipo IDENTIFICADOR DeclFunc DeclFuncVar {install ($2);}
		| /*Vazio*/
;

DeclProg:	PROGRAMA Bloco
;

DeclVar:	| VIRGULA IDENTIFICADOR DeclVar {install($2)}
		| VIRGULA IDENTIFICADOR ABRECOLCH INTCONST FECHACOLCH DeclVar {install($2)}
		|/*Vazio*/
;

DeclFunc:	ABREPAR ListaParametros FECHAPAR Bloco
;

ListaParametros:	/*Vazio*/
		| ListaParametrosCont
;

ListaParametrosCont:	Tipo IDENTIFICADOR {install($2)}
		| Tipo IDENTIFICADOR ABRECOLCH FECHACOLCH {install($2)}
		| Tipo IDENTIFICADOR VIRGULA ListaParametrosCont {install($2)}
		| Tipo IDENTIFICADOR ABRECOLCH FECHACOLCH VIRGULA ListaParametrosCont {install($2)}
; 

Bloco:		ABRECHAVE ListaDeclVar ListaComando FECHACHAVE
		| ABRECHAVE ListaDeclVar FECHACHAVE
;

ListaDeclVar:	
		| Tipo IDENTIFICADOR DeclVar PONTOVIRGULA ListaDeclVar {install($2)}
		| Tipo IDENTIFICADOR ABRECOLCH INTCONST FECHACOLCH DeclVar PONTOVIRGULA ListaDeclVar {install($2)}
;

Tipo:		INT
		| CAR
;

ListaComando:	Comando
		| Comando ListaComando
;

Comando:	PONTOVIRGULA
		| Expr PONTOVIRGULA
		| RETORNE Expr PONTOVIRGULA
		| LEIA LValueExpr PONTOVIRGULA
		| ESCREVA Expr PONTOVIRGULA
		| ESCREVA CADEIACARACTERES PONTOVIRGULA
		| NOVALINHA PONTOVIRGULA
		| SE ABREPAR Expr FECHAPAR ENTAO Comando
		| SE ABREPAR Expr FECHAPAR ENTAO Comando SENAO Comando
		| ENQUANTO ABREPAR Expr FECHAPAR EXECUTE Comando
		| Bloco
;

Expr:		AssignExpr
;

AssignExpr:	CondExpr
		| LValueExpr ATRIBUICAO AssignExpr
;

CondExpr:	OrExpr
		| OrExpr INTERROGACAO Expr DOISPONTOS CondExpr
;

OrExpr:		OrExpr OULOGICO AndExpr
		| AndExpr
;

AndExpr:	AndExpr ELOGICO EqExpr
		| EqExpr
;

EqExpr:		EqExpr IGUAL DesigExpr
		| EqExpr DIFERENTE DesigExpr
		| DesigExpr
;

DesigExpr:	DesigExpr MENOR AddExpr
		| DesigExpr MAIOR AddExpr
		| DesigExpr MAIORIGUAL AddExpr
		| DesigExpr MENORIGUAL AddExpr
		| AddExpr
;

AddExpr:	AddExpr ADICAO MulExpr
		| AddExpr SUBTRACAO MulExpr
		| MulExpr
;

MulExpr:	MulExpr MULTIPLICACAO UnExpr
		| MulExpr DIVISAO UnExpr
		| MulExpr MOD UnExpr
		| UnExpr
;

UnExpr:		SUBTRACAO PrimExpr
		| NEGACAO PrimExpr
		| PrimExpr
;

LValueExpr:	IDENTIFICADOR ABRECOLCH Expr FECHACOLCH {install($1)}
		| IDENTIFICADOR {install($1)}
;

PrimExpr:	IDENTIFICADOR ABREPAR ListExpr FECHAPAR {install($1)}
		| IDENTIFICADOR ABREPAR FECHAPAR {install($1)}
		| IDENTIFICADOR ABRECOLCH Expr FECHACOLCH {install($1)}
		| IDENTIFICADOR {install($1)}
		| CARCONST
		| INTCONST
		| ABREPAR Expr FECHAPAR
;

ListExpr:	AssignExpr
		| ListExpr VIRGULA AssignExpr
;

%%
void yyerror(char const* msg){
	printf("%s na Linha --> %d\n", msg, yylineno);
}
int main(int argc, char** argv){
	if(argc != 2){
		printf("Uso: cezinho <nome>\n");
		exit(1);
	}
	yyin=fopen(argv[1], "rt");
	errors = 0;
	if(yyin)
		yyparse();
		if(errors == 0){
			print_code();
			fetch_execute_cycle();
		}
	else
		yyerror("Arquivo não encontrado.\n");
	return 1;
}
		
